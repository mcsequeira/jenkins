pipeline {
    agent any

    options { 
  		// avoid concurrent builds
  		disableConcurrentBuilds()
	}

    environment {
    	CREDENTIALS_ID ='vfpt-edis'
        BUCKET = 'rawingest'
        PATTERN_CONTROL_SHEET = 'ngbi/control_sheet/pprd/*.yml'
        PATTERN_DAG_CONFIG = 'ngbi/dag_config/*.yml'
        COMPOSER_GIT = 'composer_repo'
        COMPOSER_GIT_URL = 'github.com/mcsequeira/composer_repo.git'
        COMPOSER_GIT_BRANCH = 'main'
        GIT_CREDENTIAL_ID = '96aa22b0-7941-4816-b309-f1d547d52c1c'
    }

    stages {

        stage('Print working directory') {
        	steps {
        		sh "pwd"
        	}
        }

        stage('Setup git repository') {
        	steps {
        		script {
      				// Store initial state in init branch, if doesn't exist create one (refs/heads/init)
      				sh "if git show-ref --quiet refs/heads/init; then git branch -D init; fi"
      				sh "git checkout -b init"

					// Get git credentials
					withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: env.GIT_CREDENTIAL_ID, usernameVariable: 'GIT_USERNAME', passwordVariable: 'GIT_PASSWORD']]){
							setupRemote(env.COMPOSER_GIT, env.COMPOSER_GIT_URL, env.GIT_USERNAME, env.GIT_PASSWORD)
						}
					}
        	}
        }

        stage('Download from GCS') {
            steps {
                // Download from GCS bucket object named PATTERN to the workspace.
                // control_sheet files
                step([$class: 'DownloadStep', 
                    credentialsId: env.CREDENTIALS_ID,
                    bucketUri: "gs://${env.BUCKET}/${env.PATTERN_CONTROL_SHEET}",
                    localDirectory: "${WORKSPACE}"])

                // dag_config file
                step([$class: 'DownloadStep', 
                    credentialsId: env.CREDENTIALS_ID,
                    bucketUri: "gs://${env.BUCKET}/${env.PATTERN_DAG_CONFIG}",
                    localDirectory: "${WORKSPACE}"])
            }
        }

        /*stage('Commit to Git'){
            steps {
                //Switch to init branch to enable reset of "local-legacy" branch
                //sh "git clean -d -fx . && git checkout -f init"

                //Remove "local-legacy" branch if it exists
                //sh "if git show-ref --quiet refs/heads/local-legacy; then git branch -D local-legacy; fi"

                //Checkout $sourceBranch (it should always exist) into "local-legacy"
                sh "git checkout -b local-legacy " + env.COMPOSER_GIT + "/" + env.COMPOSER_GIT_BRANCH

                sh "git status"

                // Add new files to track
                sh "git add *"

                sh "git status"

                sh 'git config --global user.email "you@example.com"'
                sh 'git config --global user.name "Your Name"'

                // Commit files
                sh 'git commit -am "to do: insert something"'

                sh "git status"

                // Merge files
                sh "git merge " + env.COMPOSER_GIT + "/" + env.COMPOSER_GIT_BRANCH

                sh "git status"

                // Push
                sh "git push"

            }
        } */
    }
}

/*****************************************
* Add repo remote to workspace and 
* perform git fetch
****************************************/
def setupRemote(name = '', urlWithoutProtocol = '', username = '', password = '') {
    // assess whether the remote already exists; if so set the remote url (to be sure); if not, create the remote
    sh 'if (git remote | grep ^' + name + '$); \
        then git remote set-url ' + name + ' https://' + urlWithoutProtocol + '; \
        else git remote add ' + name + ' https://' + urlWithoutProtocol +'; fi'
	

	sh "echo 'https://" + java.net.URLEncoder.encode(username, "UTF-8") + ":" + java.net.URLEncoder.encode(password, "UTF-8") + "@"+ urlWithoutProtocol + "' >> '$WORKSPACE/.git/.git-credentials'"
	sh "git config credential.helper \"store --file='$WORKSPACE/.git/.git-credentials'\""

	// remove all local tags & fetch remote tags
	sh "git tag -l | xargs git tag -d && git fetch -t"
	//Fetch remote
	sh "git fetch -f -P -p " + name
}
