pipeline {
    agent any

    options { 
  		// avoid concurrent builds
  		disableConcurrentBuilds()
	}

    environment {
    	CREDENTIALS_ID ='vfpt-edis'
        BUCKET = 'rawingest'
        PATTERN_CONTROL_SHEET = 'ngbi/control_sheet/pprd/*.yml'
        PATTERN_DAG_CONFIG = 'ngbi/dag_config/*.yml'
        LOCAL_DIR = '/var/jenkins_tmp/'
        COMPOSER_GIT = 'composer_repo'
        COMPOSER_GIT_URL = 'github.com/mcsequeira/composer_repo.git'
        GIT_CREDENTIAL_ID = '96aa22b0-7941-4816-b309-f1d547d52c1c'
    }

    stages {
    	/*
        stage('Download from GCS') {
            steps {
            	// Download from GCS bucket object named PATTERN to directory LOCAL_DIR.
            	// control_sheet files
                step([$class: 'DownloadStep', 
                	credentialsId: env.CREDENTIALS_ID,
                	bucketUri: "gs://${env.BUCKET}/${env.PATTERN_CONTROL_SHEET}",
                	localDirectory: env.LOCAL_DIR])

                // dag_config file
                step([$class: 'DownloadStep', 
                	credentialsId: env.CREDENTIALS_ID,
                	bucketUri: "gs://${env.BUCKET}/${env.PATTERN_DAG_CONFIG}",
                	localDirectory: env.LOCAL_DIR])
            }
        }
        */

        stage('Print working directory') {
        	steps {
        		sh "pwd"
        	}
        }

        stage('Setup git repository') {
        	steps {
        		script {
      				// Store initial state in init branch, if doesn't exist create one (refs/heads/init)
      				sh "if git show-ref --quiet refs/heads/init; then git branch -D init; fi"
      				sh "git checkout -b init"

					// Get git credentials
					withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: env.GIT_CREDENTIAL_ID, usernameVariable: 'GIT_USERNAME', passwordVariable: 'GIT_PASSWORD']]){
							setupRemote(env.COMPOSER_GIT, env.COMPOSER_GIT_URL, env.GIT_USERNAME, env.GIT_PASSWORD)
						}
					}
                    sh '''
                        pwd
                        if $(git remote | grep ^composer_repo$); then echo "true"; else echo "false"; fi
                        '''

        	}
        }
    }
}

/*****************************************
* Add repo remote to workspace and 
* perform git fetch
****************************************/
def setupRemote(name = '', urlWithoutProtocol = '', username = '', password = '') {
	boolean remoteExists = (sh(returnStdout: true, script: 'if $(git remote | grep ^' + name + '$); then echo "true"; else echo "false"; fi').trim() == "true")
    //https://stackoverflow.com/questions/59220020/why-jenkins-mounts-a-temporary-volume-in-addition-to-the-workspace
	
	// since it already exists and the validation gives a false result
    //sh "git remote set-url " + name + " https://" + urlWithoutProtocol
    /*if (remoteExists) {
		//Set remote url (to be sure)
		sh "git remote set-url " + name + " https://" + urlWithoutProtocol
	}
	else {
		//Create remote
		sh "git remote add " + name + " https://" + urlWithoutProtocol
	} */

	sh "echo 'https://" + java.net.URLEncoder.encode(username, "UTF-8") + ":" + java.net.URLEncoder.encode(password, "UTF-8") + "@"+ urlWithoutProtocol + "' >> '$WORKSPACE/.git/.git-credentials'"
	sh "git config credential.helper \"store --file='$WORKSPACE/.git/.git-credentials'\""

	// remove all local tags & fetch remote tags
	sh "git tag -l | xargs git tag -d && git fetch -t"
	//Fetch remote
	sh "git fetch -f -P -p " + name
}
